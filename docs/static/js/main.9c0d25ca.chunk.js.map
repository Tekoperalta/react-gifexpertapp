{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","props","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAACC,GAAW,IAE5BC,EAAiBD,EAAjBC,cAF2B,EAIEC,mBAAS,IAJX,mBAI3BC,EAJ2B,KAIfC,EAJe,KAsBlC,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAOlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SArBkB,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGjC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAKA,EAAL,WCJCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAfIC,qBAAU,WACNxB,EAASC,GACJwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAKDqB,EDpBsBK,CAAc1B,GAA/BO,EAFuB,EAEvBA,KAAKa,EAFkB,EAElBA,QAEjB,OAEI,qCACI,qBAAIJ,UAAU,sDAAd,cAAuEhB,EAAvE,OAEEoB,GAAW,wCAET,qBAAKJ,UAAU,YAAf,SAIYT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAESA,GADAA,EAAIC,aEjBhCgB,EAAe,WAAO,IAAD,EAGMzC,mBAAS,CAAC,cAHhB,mBAGvB0C,EAHuB,KAGX3C,EAHW,KAO9B,OACI,qCAEI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEY2C,EAAWnB,KAAI,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAEGA,SAAWA,GADLA,Y,MClBtC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.9c0d25ca.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = (props) => {\n\n    const {setCategories} = props;\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log('Submit hecho');\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [ inputValue, ...cats])\n            setInputValue('');\n        }\n\n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit } >\n            <input\n            type=\"text\"\n            value={inputValue}\n            onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category )}&limit=10&api_key=aVX584m5V4mYVjx9uvtOpOeXdGsJhz16`\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}   ","import React from 'react';\n\nexport const GifGridItem = ({ title, url}) => {\n\n\n    return (\n        <div className=\"card animate__animated animate__heartBeat \" >\n            <img src={ url } alt={ title } />\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n        const { data,loading } = useFetchGifs( category );\n        \n    return (\n\n        <>\n            <h3 className=\"animate__animated animate__bounce animate__repeat-2\" > {category} </h3>\n\n            { loading && <p>Loading</p> }\n\n                <div className=\"card-grid\" >\n                    \n                    \n                        {\n                            data.map( img => (\n                                <GifGridItem\n                                    key={img.id} \n                                    { ...img } \n                                />\n\n                            ))\n                        }\n                    \n                </div>\n\n        </>\n\n        \n    )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n        useEffect(() => {\n            getGifs( category )\n                .then(imgs => {\n                    setState({\n                        data: imgs,\n                        loading: false\n\n                    })\n                })\n\n        }, [category])\n\n\n\n\n    return state; //{ data: [], loading: true};\n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n\n\n    return (\n        <>\n            \n            <h2> GifExpertApp </h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            \n\n\n            <ol>\n                {\n                        categories.map(category => (\n                             <GifGrid\n                                key={ category } \n                                category={ category } />\n                        ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}